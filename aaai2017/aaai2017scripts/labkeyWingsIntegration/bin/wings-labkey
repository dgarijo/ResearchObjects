#!/usr/bin/env python

#  Copyright 2007-2015 University Of Southern California
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing,
#  software distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

__author__ = 'Rajiv Mayani <mayani@isi.edu>'

import argparse
import csv
import logging
import sys
import time

import os
from disk.errors import AuthenticationException, LabkeyException
from disk.labkey import Labkey


def configure_logging(verbosity=0):
    verbosity = min(3, verbosity)

    log_levels = [
        logging.ERROR,
        logging.WARN,
        logging.INFO,
        logging.DEBUG
    ]

    logging.basicConfig(level=log_levels[verbosity],
                        format='%(asctime)s:%(levelname)s:%(name)s(%(lineno)d): %(message)s')


def convert_to_csv(data):
    if not data:
        return

    row_count = data['rowCount'] if 'rowCount' in data else 0

    if not row_count:
        return

    writer = csv.DictWriter(sys.stdout, fieldnames=[c for c in data['rows'][0].keys() if not c.startswith('_labkey')],
                            extrasaction='ignore')
    writer.writeheader()

    for row in data['rows']:
        writer.writerow(row)


def upload_file(input_file, destination, base_url=None, username=None, password=None, project_name=None, create=False,
                overwrite=False, config=None, **kwargs):
    try:
        client = Labkey(base_url, username, password, project_name=project_name, config=config)
        client.upload_file(destination, input_file, create=create, overwrite=overwrite)
        print 'File uploaded successfully'

    except AuthenticationException as e:
        logging.error(e)
        sys.exit(2)

    except LabkeyException as e:
        logging.error(e)
        sys.exit(3)

    except ValueError as e:
        logging.error(e)
        sys.exit(1)


def download_file(file_location, destination, base_url=None, username=None, password=None, project_name=None,
                  create=False,
                  overwrite=False, config=None, **kwargs):
    try:
        client = Labkey(base_url, username, password, project_name=project_name, config=config)
        client.download_other_file(destination, file_location, create=create, overwrite=overwrite)
        print 'File downloaded successfully'

    except AuthenticationException as e:
        logging.error(e)
        sys.exit(2)

    except LabkeyException as e:
        logging.error(e)
        sys.exit(3)

    except ValueError as e:
        logging.error(e)
        sys.exit(1)


def select_rows(schema, query, base_url=None, username=None, password=None, project_name=None, config=None, **kwargs):
    try:
        client = Labkey(base_url, username, password, project_name=project_name, config=config)
        data = client.select_rows(schema, query)
        convert_to_csv(data)

    except AuthenticationException as e:
        logging.error(e)
        sys.exit(2)

    except LabkeyException as e:
        logging.error(e)
        sys.exit(3)

    except ValueError as e:
        logging.error(e)
        sys.exit(1)


def execute_sql(schema, sql, base_url=None, username=None, password=None, project_name=None, config=None, **kwargs):
    try:
        client = Labkey(base_url, username, password, project_name=project_name, config=config)
        data = client.execute_sql(schema, sql)
        convert_to_csv(data)

    except AuthenticationException as e:
        logging.error(e)
        sys.exit(2)

    except LabkeyException as e:
        logging.error(e)
        sys.exit(3)

    except ValueError as e:
        logging.error(e)
        sys.exit(1)


def ms2_analysis(input_file, fasta_file, protocol_file, base_url=None, username=None, password=None, project_name=None,
                 config=None, search_engine=None, input_location=None, fasta_location=None, protocol_location=None,
                 grouping='proteinprophet', expanded=False, upload=True, watch=False, poll_interval=5, destination='.',
                 **kwargs):
    try:
        client = Labkey(base_url, username, password, project_name=project_name, config=config)
        print 'Initializing'
        job_name, output_prefix = client.ms2_analysis(input_file=input_file, fasta_file=fasta_file,
                                                      protocol_file=protocol_file,
                                                      search_engine=search_engine, input_location=input_location,
                                                      fasta_location=fasta_location,
                                                      protocol_location=protocol_location, upload=upload)
        logging.debug('Output Prefix: %s' % output_prefix)

        if watch is True:
            if not poll_interval:
                poll_interval = 5

            logging.debug('poll_interval %d second(s)' % poll_interval)

            previous_status = None

            print 'Check MS2 analysis status'
            while True:
                data = client.ms2_status(job_name)

                if data['rowCount'] == 0:
                    raise LabkeyException('Job %r not found' % job_name)

                status = data['rows'][0]['Status']
                logging.debug('Job %s, Status %s' % (job_name, status))

                if status != previous_status:
                    previous_status = status

                print 'Job %s, Status %s' % (job_name, status)

                if status in set(['COMPLETE', 'ERROR']):
                    logging.debug('Job %r finished, exiting' % job_name)
                    break

                time.sleep(poll_interval)

            # Download files
            if destination:
                client.download_file(destination=destination, file_location='%s.prot.xml' % output_prefix,
                                     create=True, overwrite=True)
                client.download_file(destination=destination, file_location='%s.pep.xml' % output_prefix,
                                     overwrite=True)
                client.download_file(destination=destination, file_location='%s.input.xml' % output_prefix,
                                     overwrite=True)
                client.download_file(destination=destination, file_location='%s.log' % output_prefix,
                                     overwrite=True)

                row_id = client.execute_sql('exp', sql='SELECT RowId From Runs WHERE Name = %r' % job_name)
                if row_id and data['rowCount'] == 1:
                    row_id = int(row_id['rows'][0]['RowId'])
                    graph_url = 'experiment/%%(project-name)s/downloadGraph.view?rowId=%d&detail=%s'
                    client.download_other_file(destination=destination,
                                               file_location=graph_url % (row_id, False),
                                               overwrite=True)
                    client.download_other_file(destination=destination,
                                               file_location=graph_url % (row_id, True),
                                               overwrite=True)

                    os.rename(os.path.join(destination, 'run%d.png' % row_id),
                              os.path.join(destination, os.path.basename('%s.png' % output_prefix)))
                    os.rename(os.path.join(destination, 'run%dDetail.png' % row_id),
                              os.path.join(destination, os.path.basename('%sDetail.png' % output_prefix)))

                row_id = client.execute_sql('ms2',
                                            sql='SELECT MS2Details From MS2searchruns WHERE Name = %r' % job_name)
                if row_id and data['rowCount'] == 1:
                    row_id = int(row_id['rows'][0]['MS2Details'])
                    tsv_url = 'ms2/%%(project-name)s/exportProteinGroups.view?grouping=%s&expanded=%s&run=%d&exportFormat=TSV'
                    client.download_other_file(destination=destination,
                                               file_location=tsv_url % (grouping, str(int(expanded)), row_id),
                                               overwrite=True)
                    tsv_url = 'exportProteinGroups.view?grouping=%s&expanded=%s&run=%d&exportFormat=TSV'
                    os.rename(os.path.join(destination, tsv_url % (grouping, str(int(expanded)), row_id)),
                              os.path.join(destination, os.path.basename('%s.tsv' % output_prefix)))

                print 'Output files placed in directory %s' % os.path.abspath(destination)

        else:
            data = client.ms2_status(job_name)

            if data['rowCount'] == 0:
                raise LabkeyException('Job %r not found' % job_name)

            print 'Job %s, Status %s' % (job_name, data['rows'][0]['Status'])

    except AuthenticationException as e:
        logging.error(e)
        sys.exit(2)

    except LabkeyException as e:
        logging.error(e)
        sys.exit(3)

    except ValueError as e:
        logging.error(e)
        sys.exit(1)


def main():
    parser = argparse.ArgumentParser(description='Wings Labkey Integration')
    sub_parser = parser.add_subparsers(title='File Upload', description='Upload file to labkey server')

    # File Upload Options
    upload = sub_parser.add_parser('upload')
    upload.add_argument('-i', '--input-file', required=True)
    upload.add_argument('-d', '--destination', required=True,
                        help='Destination directory where the file should be uploaded')
    upload.add_argument('-c', '--create', default=False, action='store_true',
                        help='Create destination directory if it does not exists')
    upload.add_argument('-o', '--overwrite', default=False, action='store_true', help='Overwrite the file if it exists')
    upload.set_defaults(func=upload_file)

    # File Download Options
    download = sub_parser.add_parser('download')
    download.add_argument('-f', '--file-location', required=True, help='Location of file on server to download')
    download.add_argument('-d', '--destination', default='.',
                          help='Destination directory where the file should be downloaded')
    download.add_argument('-c', '--create', default=False, action='store_true',
                          help='Create destination directory if it does not exists')
    download.add_argument('-o', '--overwrite', default=False, action='store_true',
                          help='Overwrite the file if it exists')
    download.set_defaults(func=download_file)

    # Labkey API - Select Rows Options
    select = sub_parser.add_parser('select')
    select.add_argument('-s', '--schema', required=True)
    select.add_argument('-q', '--query', required=True)
    select.set_defaults(func=select_rows)

    # Labkey API - Execute SQL Options
    sql = sub_parser.add_parser('sql')
    sql.add_argument('-s', '--schema', required=True)
    sql.add_argument('-q', '--sql', required=True)
    sql.set_defaults(func=execute_sql)

    # Labkey API - Execute SQL Options
    ms2 = sub_parser.add_parser('ms2')
    ms2.add_argument('-i', '--input-file', required=True, help='Input file on which the analysis should be run')
    ms2.add_argument('-f', '--fasta-file', required=True, help='Database against which the input-file is be searched')
    ms2.add_argument('-p', '--protocol-file', required=True, help='XML file describing the search parameters')
    ms2.add_argument('-s', '--search-engine', help='Search engine to use', choices=['xtandem'])
    ms2.add_argument('-il', '--input-location', help='Server directory where the input file should be uploaded')
    ms2.add_argument('-fl', '--fasta-location', help='Server directory where the FASTA file should be uploaded')
    ms2.add_argument('-pl', '--protocol-location', help='Server directory where the protocol file should be uploaded')
    ms2.add_argument('-e', '--expanded', dest='expanded', default=False, action='store_true', help='Expanded output view')
    ms2.add_argument('-g', '--grouping', help='TSV grouping', default='proteinprophet',
                     choices=['proteinprophet', 'query', 'queryproteingroups', 'none', 'protein'])
    ms2.add_argument('-n', '--no-upload', dest='upload', default=True, action='store_false', help='Skip file upload')
    ms2.add_argument('-w', '--watch', default=False, action='store_true', help='Wait for runs to finish')
    ms2.add_argument('-d', '--poll-interval', default=5, type=int, help='Polling interval')
    ms2.add_argument('-o', '--destination', default='.',
                     help='Destination directory where the file should be downloaded')

    ms2.set_defaults(func=ms2_analysis)

    parser.add_argument('-b', '--base-url')
    parser.add_argument('-u', '--username')
    parser.add_argument('-p', '--password')
    parser.add_argument('-n', '--project-name')
    parser.add_argument('-c', '--config')
    parser.add_argument('-v', '--verbose', default=0, action='count', help='Logging verbosity')

    args = parser.parse_args(sys.argv[1:])

    configure_logging(args.verbose)

    args.func(**vars(args))


if __name__ == '__main__':
    main()
